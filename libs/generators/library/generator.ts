import { formatFiles, generateFiles, getWorkspaceLayout, installPackagesTask, names, offsetFromRoot, Tree } from '@nrwl/devkit';
import * as path from 'path';
import { libraryGenerator as nodeLibraryGenerator } from '@nrwl/node/src/generators/library/library';
import { libraryGenerator as nestLibraryGenerator } from '@nrwl/nest/src/generators/library/library';
import { libraryGenerator as reactLibraryGenerator } from '@nrwl/react/src/generators/library/library';
import { Linter } from '@nrwl/linter';
import { LibraryGeneratorSchema } from './schema';

interface NormalizedSchema extends LibraryGeneratorSchema {
  projectName: string;
  projectRoot: string;
  projectDirectory: string;
}

export default async function (tree: Tree, schema: LibraryGeneratorSchema) {
  const normalizedOptions = normalizeOptions();

  libraryGeneratorFactory();

  addFiles(normalizedOptions);

  if (schema?.databaseType) addDatabaseFiles(normalizedOptions);

  await formatFiles(tree);

  // CLEANUP: delete the lib folder automatically generated by libraryGenerator above as it's not needed
  tree.delete(`${normalizedOptions.projectRoot}/src/lib`);

  return () => {
    installPackagesTask(tree);
  };

  function libraryGeneratorFactory() {
    switch (schema.framework) {
      case 'nest':
        generateNestLibrary();
        break;
      case 'react':
        generateReactLibrary();
        break;
      default:
        generateNodeLibrary();
    }
  }

  async function generateNestLibrary() {
    await nestLibraryGenerator(tree, {
      name: schema.name,
      directory: getDirectory(),
      tags: getTags(),
      strict: true,
      standaloneConfig: true,
      buildable: true,
      skipFormat: false,
      linter: Linter.EsLint,
      controller: false,
      service: false,
    });
  }

  async function generateReactLibrary() {
    await reactLibraryGenerator(tree, {
      name: schema.name,
      directory: getDirectory(),
      tags: getTags(),
      strict: true,
      standaloneConfig: true,
      buildable: true,
      skipFormat: false,
      linter: Linter.EsLint,
      style: 'styled-jsx',
      skipTsConfig: false,
      unitTestRunner: 'none',
    });
  }

  async function generateNodeLibrary() {
    await nodeLibraryGenerator(tree, {
      name: schema.name,
      directory: getDirectory(),
      tags: getTags(),
      strict: true,
      standaloneConfig: true,
      buildable: true,
      skipFormat: false,
      linter: Linter.EsLint,
      compiler: 'tsc',
    });
  }

  function normalizeOptions(): NormalizedSchema {
    const name: string = names(schema.name).fileName;
    const directory: string = getDirectory();
    const projectDirectory: string = directory ? `${names(directory).fileName}/${name}` : name;
    const projectName: string = projectDirectory.replace(new RegExp('/', 'g'), '-');
    const projectRoot: string = `${getWorkspaceLayout(tree).libsDir}/${projectDirectory}`;

    return {
      ...schema,
      projectName,
      projectRoot,
      projectDirectory,
    };
  }

  function getDirectory(): string {
    return `${schema.scope}/${schema.type}`;
  }

  function getTags(): string {
    const domainTag: string = schema.domain ? `, domain:${schema.domain}` : '';
    return `scope:${schema.scope}, type:${schema.type}, framework:${schema.framework}${domainTag}`;
  }

  function addFiles(schema: NormalizedSchema) {
    const templateOptions = {
      ...schema,
      ...names(schema.name),
      offsetFromRoot: offsetFromRoot(schema.projectRoot),
      template: '',
    };

    generateFiles(tree, path.join(__dirname, `files/${schema.framework}`), schema.projectRoot, templateOptions);
  }

  function addDatabaseFiles(schema: NormalizedSchema) {
    const templateOptions = {
      ...schema,
      ...names(schema.name),
      offsetFromRoot: offsetFromRoot(schema.projectRoot),
      template: '',
    };

    generateFiles(tree, path.join(__dirname, `files/database/${schema.databaseType}`), schema.projectRoot, templateOptions);
  }
}
