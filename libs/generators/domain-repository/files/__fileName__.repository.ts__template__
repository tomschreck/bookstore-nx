import { InjectRepository } from '@nestjs/typeorm';
import { EntityNotFoundError, Repository } from 'typeorm';
import { IRepository, HandlePostgresErrors } from '@sanctuary-nx/core/lib-util/ddd-core';
import { Injectable } from '@nestjs/common';
import { <%= className %>Model } from '../../../0_domain';
import { <%= className %>Entity } from '../../entities';
import { <%= className %>EntityToModelTransformer } from '../../transformers';

@Injectable()
export class <%= className %>Repository implements IRepository<<%= className %>Model>
{
  constructor(
    @InjectRepository(<%= className %>Entity)
    private readonly repository: Repository<<%= className %>Entity>,
    private readonly transformer: <%= className %>EntityToModelTransformer
  ) {}

  @HandlePostgresErrors()
  async findOneById(id: string): Promise<<%= className %>Model | null> {
    /*
    const entity: <%= className %>Entity | null = await this.repository
      .createQueryBuilder('<%= fileName %>')
      .where('<%= fileName %>.id = :id', { id: id })
      .getOne();

    if (entity) return this.transformer.transform(entity);
    else return null;
    */

    throw new Error('<%= className %>Repository findOneById method not implemented.');
  }

  @HandlePostgresErrors()
  async findOneByIdOrFail(id: string): Promise<<%= className %>Model> {
    const model: <%= className %>Model | null = await this.findOneById(id);

    if (model) return model;

    throw new EntityNotFoundError(<%= className %>Entity, {});
  }

  @HandlePostgresErrors()
  async saveBatch(input: <%= className %>Model[]): Promise<void> {
    await this.repository.upsert(input, ['ENTER_PRIMARY_KEYS_HERE']);
  }

  @HandlePostgresErrors()
  async saveOne(input: <%= className %>Model): Promise<void> {
    await this.repository.upsert(input, ['ENTER_PRIMARY_KEYS_HERE']);
  }
}
