import { UniqueEntityID } from '@bookstore-nx/ddd-core';
import { CommandHandler, EventPublisher, ICommandHandler } from '@nestjs/cqrs';
import { <%= aggregate.className %>Aggregate } from '../../../0_domain';
import { <%= dto.className %>Dto } from '../../../shared';
import { <%= className %>Command } from '../../commands';


@CommandHandler(<%= className %>Command)
export class <%= className %>CommandHandler implements ICommandHandler<<%= className %>Command>{


  constructor(readonly eventPublisher: EventPublisher)
  {
  }

  execute(command: <%= className %>Command): Promise<void>
  {
    return new Promise((resolve, reject) =>
    {
      const <%= dto.propertyName %>Dto: <%= dto.className %>Dto = command.<%= dto.propertyName %>Dto;
      const aggregateResult = <%= aggregate.className %>Aggregate.create(<%= dto.propertyName %>Dto, UniqueEntityID.create(<%= dto.propertyName %>Dto.id));

      if (aggregateResult.isSuccess())
      {
        const aggregate: <%= aggregate.className %>Aggregate = aggregateResult.getValue();
        // TO-DO: specify the aggregate function which initiates events...
        // aggregate.createBook();

        // mergeObjectContext & commit PUBLISHES EVENTS FROM AGGREGATE...
        this.eventPublisher.mergeObjectContext(aggregate);
        aggregate.commit();
        resolve();
        return;
      }


      if (aggregateResult.isFailure())
      {
        reject(aggregateResult.getError());
        return;
      }
    });
  }
}
