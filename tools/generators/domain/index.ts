import { formatFiles, generateFiles, installPackagesTask, joinPathFragments, names, Tree } from '@nrwl/devkit';
import { moduleGenerator, ModuleGeneratorOptions } from '@nrwl/nest/src/generators/module/module';
import { libraryGenerator } from '@nrwl/workspace/generators';
import { Schema } from '@nrwl/workspace/src/generators/library/schema';
import { getGeneratorMetaData } from '../base.generator';

interface DomainSchema
{
  name: string;
}

export default async function (tree: Tree, schema: DomainSchema)
{
  const nameVariations = names(schema.name);
  const directory: string = 'domains';
  const projectName: string = `${directory}-${nameVariations.fileName}`;


  // CREATE AND REGISTER LIBRARY WITH NX
  const librarySchema: Schema = {
    name: schema.name,
    directory: directory,
    standaloneConfig: true
  };

  await libraryGenerator(tree, librarySchema);

  // GET META DATA & PROJECT NEEDED TO GENERATE CONTENT FROM TEMPLATES
  const { substitutions, project } = getGeneratorMetaData(tree, schema.name, projectName);


  // CREATE NEST JS ROOT MODULE
  const moduleSchema: ModuleGeneratorOptions = {
    name: substitutions.fileName,
    project: projectName,
    flat: true
  };

  await moduleGenerator(tree, moduleSchema);


  // generate folders and files from ./templates into the target path (project.sourceRoot)
  generateFiles(
    tree,
    joinPathFragments(__dirname, './templates'),
    project.sourceRoot,
    substitutions
  );

  // CLEANUP: delete the lib folder automatically generated by libraryGenerator above as it's not needed
  tree.delete(`${project.sourceRoot}/lib`);

  await formatFiles(tree);

  return () =>
  {
    installPackagesTask(tree);
  };
}
