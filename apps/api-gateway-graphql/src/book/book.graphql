scalar Void

type Book {
  id: ID!
  title: String!
  author: String!
  isbn: String!
  category: String
  status: String
  price: Float
  inventory: Int
  notes: String
}

type BookForWeb {
  id: ID!
  title: String!
  author: String!
  isbn: String!
  category: String
  status: String
  price: Float
  inventory: Int
}

input BookInput {
  id: ID!
  title: String!
  author: String!
  isbn: String!
  category: String
  status: String
  price: Float
  inventory: Int
  notes: String
}

input Search {
  title: String!
  author: String!
  category: String
  status: String
}

input AdjustInventoryInput {
  id: ID!
  inventory: Int
}

type Query {
  books: [Book]!
  book(id: ID!): Book
  bookForWeb(id: ID!): BookForWeb
  searchBooksForWeb(search: Search):[Book]
}

type Mutation {
  createBook(createBookInput: BookInput!): Void
  updateBook(updateBookInput: BookInput!): Void
  adjustInventory(adjustInventoryInput: AdjustInventoryInput!): Void
  removeBook(id: ID!): Void
}
